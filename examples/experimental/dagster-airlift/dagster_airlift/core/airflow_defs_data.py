from collections import defaultdict
from functools import cached_property
from typing import AbstractSet, Callable, Iterable, Mapping, Set, Union

from dagster import AssetKey, Definitions
from dagster._core.definitions.asset_spec import AssetSpec
from dagster._record import record

from dagster_airlift.constants import AUTOMAPPED_TASK_METADATA_KEY, DAG_MAPPING_METADATA_KEY
from dagster_airlift.core.airflow_instance import AirflowInstance
from dagster_airlift.core.serialization.compute import AirliftMetadataMappingInfo
from dagster_airlift.core.serialization.serialized_data import DagHandle, TaskHandle
from dagster_airlift.core.utils import handles_for_spec, is_mapped_asset_spec


@record
class AirflowDefinitionsData:
    airflow_instance: AirflowInstance
    mapped_defs: Definitions

    @property
    def instance_name(self) -> str:
        return self.airflow_instance.name

    @cached_property
    def mapping_info(self) -> AirliftMetadataMappingInfo:
        return AirliftMetadataMappingInfo(asset_specs=list(self.mapped_defs.get_all_asset_specs()))

    def task_ids_in_dag(self, dag_id: str) -> Set[str]:
        return self.mapping_info.task_id_map[dag_id]

    @property
    def dag_ids_with_mapped_asset_keys(self) -> AbstractSet[str]:
        return self.mapping_info.dag_ids

    @cached_property
    def asset_keys_per_handle(self) -> Mapping[Union[DagHandle, TaskHandle], AbstractSet[AssetKey]]:
        asset_keys_per_handle = defaultdict(set)
        for spec in self.mapped_defs.get_all_asset_specs():
            if is_mapped_asset_spec(spec):
                for handle in handles_for_spec(spec):
                    asset_keys_per_handle[handle].add(spec.key)
        return asset_keys_per_handle

    @cached_property
    def asset_specs_by_key(self) -> Mapping[AssetKey, AssetSpec]:
        return {spec.key: spec for spec in self.mapped_defs.get_all_asset_specs()}

    @cached_property
    def asset_keys_per_dag(self) -> Mapping[str, AbstractSet[AssetKey]]:
        dag_id_to_asset_key = defaultdict(set)
        for spec in self.mapped_defs.get_all_asset_specs():
            if DAG_MAPPING_METADATA_KEY in spec.metadata:
                for dag_id in spec.metadata[DAG_MAPPING_METADATA_KEY]:
                    dag_id_to_asset_key[dag_id].add(spec.key)
        return dag_id_to_asset_key

    def mapped_asset_keys(self, handle: Union[DagHandle, TaskHandle]) -> AbstractSet[AssetKey]:
        return self.asset_keys_per_handle[handle]

    def autogenerated_asset_keys(
        self, handle: Union[DagHandle, TaskHandle]
    ) -> AbstractSet[AssetKey]:
        return {
            key
            for key in self.mapped_asset_keys(handle)
            if AUTOMAPPED_TASK_METADATA_KEY in self.asset_specs_by_key[key].metadata
        }

    def filter_specs(self, func: Callable[[AssetSpec], bool]) -> Iterable[AssetSpec]:
        for spec in self.mapping_info.asset_specs:
            if func(spec):
                yield spec
